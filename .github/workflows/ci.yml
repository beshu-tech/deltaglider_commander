name: CI

on:
  push:
    branches: [ main, develop ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]

jobs:
  backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
        pip install ruff mypy pytest-cov

    - name: Lint with ruff
      run: |
        ruff check src/ tests/
        ruff format --check src/ tests/

    - name: Type check with mypy
      run: |
        mypy src/dgcommander --ignore-missing-imports

    - name: Run tests with coverage
      run: |
        pytest tests/ -v --cov=src/dgcommander --cov-report=xml --cov-report=term

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: backend
        name: backend-coverage

  frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend

    steps:
    - uses: actions/checkout@v4

    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 9

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'pnpm'
        cache-dependency-path: frontend/pnpm-lock.yaml

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Lint
      run: pnpm lint

    - name: Type check
      run: pnpm typecheck

    - name: Format check
      run: pnpm format

    - name: Run tests
      run: pnpm test -- --run

    - name: Build
      run: pnpm build

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend, frontend]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install backend
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev,server]

    - name: Start MinIO
      run: |
        docker run -d \
          --name minio \
          -p 9000:9000 \
          -e MINIO_ROOT_USER=deltadmin \
          -e MINIO_ROOT_PASSWORD=deltasecret \
          minio/minio:latest server /data

        # Wait for MinIO to be ready
        sleep 5
        curl --retry 10 --retry-delay 2 --retry-connrefused http://localhost:9000/minio/health/live

    - name: Setup MinIO
      run: |
        curl https://dl.min.io/client/mc/release/linux-amd64/mc --create-dirs -o $HOME/minio-binaries/mc
        chmod +x $HOME/minio-binaries/mc
        export PATH=$PATH:$HOME/minio-binaries/
        mc alias set local http://localhost:9000 deltadmin deltasecret
        mc mb local/dg-demo || true

    - name: Run integration tests
      env:
        AWS_ACCESS_KEY_ID: deltadmin
        AWS_SECRET_ACCESS_KEY: deltasecret
        AWS_DEFAULT_REGION: eu-west-1
        DGCOMM_S3_ENDPOINT: http://localhost:9000
        DGCOMM_S3_ADDRESSING_STYLE: path
        DGCOMM_HMAC_SECRET: test-secret
        DGCOMM_CACHE_DIR: /tmp/dgcommander-cache
      run: |
        pytest tests/ -v -m integration || pytest tests/ -v

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [backend, frontend]

    steps:
    - uses: actions/checkout@v4

    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 9

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'pnpm'
        cache-dependency-path: frontend/pnpm-lock.yaml

    - name: Build frontend
      run: |
        cd frontend
        pnpm install --frozen-lockfile
        pnpm build

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Verify frontend build
      run: ls -la frontend/dist || echo "frontend/dist not found!"

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: dgcommander:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
        load: true

    - name: Test Docker image
      run: |
        docker run --rm dgcommander:test python -c "from dgcommander.app import create_app; print('App imports successfully')"

  docker-publish-amd64:
    name: Publish Docker Image (amd64)
    runs-on: ubuntu-latest
    needs: [backend, frontend, integration, docker, quality-gates]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')

    steps:
    - uses: actions/checkout@v4

    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 9

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'pnpm'
        cache-dependency-path: frontend/pnpm-lock.yaml

    - name: Build frontend
      run: |
        cd frontend
        pnpm install --frozen-lockfile
        pnpm build

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: beshultd/deltaglider_commander
        tags: |
          type=ref,event=branch
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}
        flavor: |
          suffix=-amd64,onlatest=true

    - name: Build and push amd64 image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        provenance: false

  docker-publish-arm64:
    name: Publish Docker Image (arm64)
    runs-on: blacksmith-4vcpu-ubuntu-2404-arm
    needs: [backend, frontend, integration, docker, quality-gates]
    if: startsWith(github.ref, 'refs/tags/')

    steps:
    - uses: actions/checkout@v4

    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 9

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'pnpm'
        cache-dependency-path: frontend/pnpm-lock.yaml

    - name: Build frontend
      run: |
        cd frontend
        pnpm install --frozen-lockfile
        pnpm build

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: beshultd/deltaglider_commander
        tags: |
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest
        flavor: |
          suffix=-arm64,onlatest=true

    - name: Build and push arm64 image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        provenance: false

  docker-publish-manifest:
    name: Create Multi-Arch Manifest
    runs-on: ubuntu-latest
    needs: [docker-publish-amd64, docker-publish-arm64]
    if: startsWith(github.ref, 'refs/tags/')

    steps:
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract version from tag
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        MAJOR_MINOR=$(echo $VERSION | cut -d. -f1-2)
        echo "major_minor=$MAJOR_MINOR" >> $GITHUB_OUTPUT

    - name: Create and push manifest for version tag
      run: |
        docker buildx imagetools create -t beshultd/deltaglider_commander:${{ steps.version.outputs.version }} \
          beshultd/deltaglider_commander:${{ steps.version.outputs.version }}-amd64 \
          beshultd/deltaglider_commander:${{ steps.version.outputs.version }}-arm64

    - name: Create and push manifest for major.minor tag
      run: |
        docker buildx imagetools create -t beshultd/deltaglider_commander:${{ steps.version.outputs.major_minor }} \
          beshultd/deltaglider_commander:${{ steps.version.outputs.version }}-amd64 \
          beshultd/deltaglider_commander:${{ steps.version.outputs.version }}-arm64

    - name: Create and push manifest for latest tag
      run: |
        docker buildx imagetools create -t beshultd/deltaglider_commander:latest \
          beshultd/deltaglider_commander:${{ steps.version.outputs.version }}-amd64 \
          beshultd/deltaglider_commander:${{ steps.version.outputs.version }}-arm64

  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    needs: [backend, frontend, integration]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Check for security issues
      run: |
        pip install bandit safety
        bandit -r src/ -ll || true
        safety check || true

    - name: Check dependencies
      run: |
        pip install pip-audit
        pip-audit || true