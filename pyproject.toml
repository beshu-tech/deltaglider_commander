[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "dgcommander"
version = "0.1.0"
description = "DeltaGlider UI backend service"
readme = "README.md"
authors = [
  { name = "DeltaGlider UI Team" }
]
requires-python = ">=3.11"
dependencies = [
  "flask>=3.0,<4",
  "cachetools>=5.3",
  "itsdangerous>=2.1",
  "typing-extensions>=4.9",
  "deltaglider>=0.3.0.dev0",
  "boto3>=1.40.0,<2",
  "Flask-Cors>=4.0",
  "pydantic>=2.5.0,<3"
]

[project.optional-dependencies]
dev = [
  "pytest>=7.4",
  "pytest-flask>=1.3",
  "pytest-asyncio>=0.21",
  "pytest-cov>=4.1",
  "freezegun>=1.5",
  "ruff>=0.1.0",
  "mypy>=1.7.0",
  "bandit>=1.7.5",
  "safety>=2.3.5",
  "pip-audit>=2.6"
]
server = [
  "gunicorn>=21.2"
]

[project.urls]
Home = "https://github.com/beshu-tech/deltaglider"

[tool.pytest.ini_options]
minversion = "7.4"
addopts = "-ra"
testpaths = ["tests"]
filterwarnings = [
  "error::DeprecationWarning",
  "error::PendingDeprecationWarning"
]
markers = [
  "integration: marks tests as integration tests",
  "benchmark: marks tests as performance benchmarks"
]

[tool.ruff]
target-version = "py311"
line-length = 120

[tool.ruff.lint]
select = [
  "E",   # pycodestyle errors
  "W",   # pycodestyle warnings
  "F",   # pyflakes
  "I",   # isort
  "B",   # flake8-bugbear
  "C90", # mccabe complexity
  "UP",  # pyupgrade
  "S",   # flake8-bandit security
]
ignore = [
  "E501", # line too long (handled by formatter)
  "B008", # do not perform function calls in argument defaults
  "C901", # complex functions allowed
  "S108", # temp directory usage allowed in dev
  "B904", # exception handling pattern allowed
  "E402", # module level import in conftest is necessary
  "S106", # hardcoded password in tests is acceptable
  "UP038", # isinstance with tuple is fine
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101"] # allow assert in tests

[tool.mypy]
python_version = "3.11"
warn_return_any = false
warn_unused_configs = true
disallow_untyped_defs = false
disallow_any_unimported = false
no_implicit_optional = false
warn_redundant_casts = true
warn_unused_ignores = false
warn_no_return = false
check_untyped_defs = false
ignore_missing_imports = true

# Ignore files with known issues that don't affect core functionality
[[tool.mypy.overrides]]
module = [
    "dgcommander.common.*",
    "dgcommander.services.deltaglider",
    "dgcommander.services.cache_strategy",
    "dgcommander.scripts.*",
    "dgcommander.jobs.*",
    "dgcommander.deps",
    "dgcommander.domain.*",
    "dgcommander.infrastructure.*",
    "dgcommander.application.*",
    "dgcommander.api.objects_clean",
    "dgcommander.util.cache"
]
ignore_errors = true

[tool.coverage.run]
source = ["src/dgcommander"]
omit = [
  "*/tests/*",
  "*/__init__.py",
  "*/migrations/*"
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "if self.debug:",
  "if __name__ == .__main__.:",
  "raise NotImplementedError",
  "if TYPE_CHECKING:"
]